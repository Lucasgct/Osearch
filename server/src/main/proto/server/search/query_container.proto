/*
  Schemas of _common.query_dsl category

  Schemas of _common.query_dsl category

  The version of the OpenAPI document: 1.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package org.opensearch.search.proto;
option java_multiple_files = true;


import "server/search/intervals_fuzzy.proto";
import "server/search/intervals_prefix.proto";
import "server/search/intervals_wildcard.proto";
import "server/search/intervals_filter_script.proto";
import "server/search/exists_query.proto";
import "server/search/fuzzy_query.proto";
import "server/search/ids_query.proto";
import "server/search/prefix_query.proto";
import "server/search/range_query.proto";
import "server/search/regexp_query.proto";
import "server/search/terms_query.proto";
import "server/search/terms_set_query.proto";
import "server/search/wildcard_query.proto";
import "server/search/query_container_term_value.proto";
import "server/search/match_bool_prefix_query.proto";
import "server/search/match_none_query.proto";
import "server/search/match_phrase_prefix_query.proto";
import "server/search/match_phrase_query.proto";
import "server/search/multi_match_query.proto";
import "server/search/query_container_match_value.proto";
import "server/search/query_string_query.proto";
import "server/search/simple_query_string_query.proto";
import "server/search/function_boost_mode.proto";
import "server/search/function_score_mode.proto";
import "server/search/decay_function.proto";
import "server/search/field_value_factor_score_function.proto";
import "server/search/random_score_function.proto";
import "server/search/match_all_query.proto";
import "google/protobuf/wrappers.proto";

message QueryContainer {

  ExistsQuery exists = 1;

  // Returns documents that contain terms similar to the search term, as measured by a Levenshtein edit distance.
  map<string, FuzzyQuery> fuzzy = 2;

  IdsQuery ids = 3;

  // Returns documents that contain a specific prefix in a provided field.
  map<string, PrefixQuery> prefix = 4;

  // Returns documents that contain terms within a provided range.
  map<string, RangeQuery> range = 5;

  // Returns documents that contain terms matching a regular expression.
  map<string, RegexpQuery> regexp = 6;

  // Returns documents that contain an exact term in a provided field. To return a document, the query term must exactly match the queried field's value, including whitespace and capitalization.
  map<string, QueryContainerTermValue> term = 7;

  //TODO: missing def in https://github.com/opensearch-project/opensearch-api-specification/blob/main/spec/schemas/_common.query_dsl.yaml#L1851
  map<string, TermsQuery> terms = 8;

  // Returns documents that contain a minimum number of exact terms in a provided field. To return a document, a required number of terms must exactly match the field values, including whitespace and capitalization.
  map<string, TermsSetQuery> terms_set = 9;

  // Returns documents that contain terms matching a wildcard pattern.
  map<string, WildcardQuery> wildcard = 10;

  // Returns documents that match a provided text, number, date or boolean value. The provided text is analyzed before matching.
  map<string, QueryContainerMatchValue> match = 11;

  // Analyzes its input and constructs a `bool` query from the terms. Each term except the last is used in a `term` query. The last term is used in a prefix query.
  map<string, MatchBoolPrefixQuery> match_bool_prefix = 12;

  // Analyzes the text and creates a phrase query out of the analyzed text.
  map<string, MatchPhraseQuery> match_phrase = 13;

  // Returns documents that contain the words of a provided text, in the same order as provided. The last term of the provided text is treated as a prefix, matching any words that begin with that term.
  map<string, MatchPhrasePrefixQuery> match_phrase_prefix = 14;

  MultiMatchQuery multi_match = 15;

  QueryStringQuery query_string = 16;

  SimpleQueryStringQuery simple_query_string = 17;

  // Returns documents based on the order and proximity of matching terms.
  map<string, IntervalsQuery> intervals = 18;

  MatchAllQuery match_all = 19;

  MatchNoneQuery match_none = 20;

  BoolQuery bool = 21;

  BoostingQuery boosting = 22;

  ConstantScoreQuery constant_score = 23;

  DisMaxQuery dis_max = 24;

  FunctionScoreQuery function_score = 25;

}

message BoolQuery {

  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  .google.protobuf.FloatValue boost = 93922211;

  .google.protobuf.StringValue _name = 91108202;

  // The clause (query) must appear in matching documents. However, unlike `must`, the score of the query will be ignored.
  repeated QueryContainer filter = 200750218;

  oneof minimum_should_match{
    float number_minimum_should_match = 3;
    string string_minimum_should_match = 4;
  }

  // The clause (query) must appear in matching documents and will contribute to the score.
  repeated QueryContainer must = 3363337;

  // The clause (query) must not appear in the matching documents. Because scoring is ignored, a score of `0` is returned for all documents.
  repeated QueryContainer must_not = 317063070;

  // The clause (query) should appear in the matching document.
  repeated QueryContainer should = 366275150;

}

message BoostingQuery {

  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  .google.protobuf.FloatValue boost = 93922211;

  .google.protobuf.StringValue name = 91108202;

  // Floating point number between 0 and 1.0 used to decrease the relevance scores of documents matching the `negative` query.
  float negative_boost = 204613866;

  QueryContainer negative = 384240694;

  QueryContainer positive = 210934266;

}

message ConstantScoreQuery {

  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  .google.protobuf.FloatValue boost = 93922211;

  .google.protobuf.StringValue name = 91108202;

  QueryContainer filter = 200750218;

}

message DisMaxQuery {

  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  .google.protobuf.FloatValue boost = 93922211;

  .google.protobuf.StringValue name = 91108202;

  // One or more query clauses. Returned documents must match one or more of these queries. If a document matches multiple queries, OpenSearch uses the highest relevance score.
  repeated QueryContainer queries = 118216551;

  // Floating point number between 0 and 1.0 used to increase the relevance scores of documents matching multiple query clauses.
  float tie_breaker = 38274757;

}

message FunctionScoreQuery {

  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  .google.protobuf.FloatValue boost = 93922211;

  .google.protobuf.StringValue name = 91108202;

  FunctionBoostMode boost_mode = 121150658;

  // One or more functions that compute a new score for each document returned by the query.
  repeated FunctionScoreContainer functions = 140572773;

  // Restricts the new score to not exceed the provided limit.
  float max_boost = 250179320;

  // Excludes documents that do not meet the provided score threshold.
  float min_score = 770662;

  QueryContainer query = 107944136;

  FunctionScoreMode score_mode = 509935410;

}

message IntervalsAllOf {

  // An array of rules to combine. All rules must produce a match in a document for the overall source to match.
  repeated IntervalsContainer intervals = 503100494;

  // Maximum number of positions between the matching terms. Intervals produced by the rules further apart than this are not considered matches.
  float max_gaps = 407707224;

  // If `true`, intervals produced by the rules should appear in the order in which they are specified.
  bool ordered = 133367701;

  IntervalsFilter filter = 200750218;

}



message IntervalsAnyOf {

  // An array of rules to match.
  repeated IntervalsContainer intervals = 503100494;

  IntervalsFilter filter = 200750218;

}

message IntervalsMatch {

  // Analyzer used to analyze terms in the query.
  string analyzer = 487568219;

  // Maximum number of positions between the matching terms. Terms further apart than this are not considered matches.
  float max_gaps = 407707224;

  // If `true`, matching terms must appear in their specified order.
  bool ordered = 133367701;

  // Text you wish to find in the provided field.
  string query = 107944136;

  // Path to field or array of paths. Some API's support wildcards in the path to select multiple fields.
  string use_field = 198293438;

  IntervalsFilter filter = 200750218;

}


message IntervalsQuery {

  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  .google.protobuf.FloatValue boost = 93922211;

  .google.protobuf.StringValue name = 91108202;

  IntervalsAllOf all_of = 341145293;

  IntervalsAnyOf any_of = 338910968;

  IntervalsFuzzy fuzzy = 97805834;

  IntervalsMatch match = 103668165;

  IntervalsPrefix prefix = 443239791;

  IntervalsWildcard wildcard = 99273256;

}

message FunctionScoreContainer {

  QueryContainer filter = 200750218;

  float weight = 254721417;

  DecayFunction exp = 100893;

  DecayFunction gauss = 98128507;

  DecayFunction linear = 28930269;

  FieldValueFactorScoreFunction field_value_factor = 97698563;

  RandomScoreFunction random_score = 212424682;

}


message IntervalsFilter {

  IntervalsContainer after = 92734940;

  IntervalsContainer before = 319144067;

  IntervalsContainer contained_by = 530639782;

  IntervalsContainer containing = 145248910;

  IntervalsContainer not_contained_by = 495982992;

  IntervalsContainer not_containing = 505547643;

  IntervalsContainer not_overlapping = 17608400;

  IntervalsContainer overlapping = 414234055;

  IntervalsFilterScript script = 370814774;

}

message IntervalsContainer {

  IntervalsAllOf all_of = 341145293;

  IntervalsAnyOf any_of = 338910968;

  IntervalsFuzzy fuzzy = 97805834;

  IntervalsMatch match = 103668165;

  IntervalsPrefix prefix = 443239791;

  IntervalsWildcard wildcard = 99273256;

}
