/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

apply plugin: 'jacoco'

repositories {
  mavenCentral()
}

allprojects {
  plugins.withId('jacoco') {
    jacoco.toolVersion = '0.8.7'
  }
}

tasks.withType(JacocoReport) {
  reports {
    xml.enabled true
    html.enabled true
  }
}

tasks.register("codeCoverageReport", JacocoReport) {
  description = 'Generates aggregate report from all subprojects.'
  group = 'verification'
  executionData.setFrom fileTree(dir: '.', include: '**/build/jacoco/*.exec')
}

tasks.register("codeCoverageReportForUnitTest", JacocoReport) {
  description = 'Generates aggregate report from all subprojects for unit test.'
  group = 'verification'
  executionData.setFrom fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

tasks.register("codeCoverageReportForIntegTest", JacocoReport) {
  description = 'Generates aggregate report from all subprojects for integration test.'
  group = 'verification'
  executionData.setFrom fileTree(dir: '.', include: ['**/build/jacoco/integTest.exec', '**/build/jacoco/internalClusterTest.exec', '**/build/jacoco/javaRestTest.exec', '**/build/jacoco/yamlRestTest.exec' ])
}

gradle.projectsEvaluated {
  def projectsWithJavaPlugin = subprojects.findAll { it.pluginManager.hasPlugin('java') }
  def projectsWithUnitTest = projectsWithJavaPlugin.findAll { it.tasks.findByName('test').enabled }
  def projectsWithIntegTest = projectsWithJavaPlugin.findAll {it.tasks.findByName('integTest')}
  def projectsWithInternalClusterTest = projectsWithJavaPlugin.findAll {it.tasks.findByName('internalClusterTest')}
  def projectsWithJavaRestTest = projectsWithJavaPlugin.findAll {it.tasks.findByName('javaRestTest')}
  def projectsWithYamlRestTest = projectsWithJavaPlugin.findAll {it.tasks.findByName('yamlRestTest')}
  def projectsWithAllIntegTest = projectsWithIntegTest + projectsWithInternalClusterTest + projectsWithJavaRestTest + projectsWithYamlRestTest
  def projectsWithTest = projectsWithUnitTest + projectsWithAllIntegTest

  tasks.named("codeCoverageReportForUnitTest").configure {
    dependsOn projectsWithUnitTest.test
    sourceDirectories.setFrom files(projectsWithUnitTest.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(projectsWithUnitTest.sourceSets.main.output)
  }

  tasks.named("codeCoverageReportForIntegTest").configure {
    dependsOn {
      projectsWithIntegTest.integTest
      projectsWithInternalClusterTest.internalClusterTest
      projectsWithJavaRestTest.javaRestTest
      projectsWithYamlRestTest.yamlRestTest
    }
    sourceDirectories.setFrom files(projectsWithAllIntegTest.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(projectsWithAllIntegTest.sourceSets.main.output)
  }

  tasks.named("codeCoverageReport").configure {
    dependsOn {
      projectsWithUnitTest.test
      projectsWithIntegTest.integTest
      projectsWithInternalClusterTest.internalClusterTest
      projectsWithJavaRestTest.javaRestTest
      projectsWithYamlRestTest.yamlRestTest
    }
    sourceDirectories.setFrom files(projectsWithTest.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(projectsWithTest.sourceSets.main.output)
  }
}
