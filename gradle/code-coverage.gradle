/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

apply plugin: 'jacoco'

repositories {
  mavenCentral()
}

allprojects {
  plugins.withId('jacoco') {
    jacoco.toolVersion = '0.8.7'
  }
}

tasks.withType(JacocoReport) {
  reports {
    xml.enabled true
    html.enabled true
  }
}

task codeCoverageReport(type: JacocoReport, group: 'verification') {
  description = 'Generates aggregate report from all subprojects.'

  executionData.setFrom fileTree(dir: '.', include: '**/build/jacoco/*.exec')

  gradle.projectsEvaluated {
    // Select subprojects that are supported by jacoco and have got unit tests
    def selectedSubprojects = subprojects.findAll { it.pluginManager.hasPlugin('java') && it.tasks.findByName('test').enabled }
    sourceDirectories.setFrom files(selectedSubprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(selectedSubprojects.sourceSets.main.output)
    dependsOn selectedSubprojects.test

    selectedSubprojects = subprojects.findAll { it.pluginManager.hasPlugin('java') && it.tasks.findByName('integTest')}
    sourceDirectories.setFrom files(selectedSubprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(selectedSubprojects.sourceSets.main.output)
    dependsOn selectedSubprojects.integTest
  }
}

task codeCoverageReportforUnitTest(type: JacocoReport, group: 'verification') {
  description = 'Generates aggregate report from all subprojects for unit test.'

  executionData.setFrom fileTree(dir: '.', include: '**/build/jacoco/test.exec')

  gradle.projectsEvaluated {
    // Select subprojects that are supported by jacoco and have got unit tests
    def selectedSubprojects = subprojects.findAll { it.pluginManager.hasPlugin('java') && it.tasks.findByName('test').enabled }
    sourceDirectories.setFrom files(selectedSubprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(selectedSubprojects.sourceSets.main.output)
    dependsOn selectedSubprojects.test
  }
}

task codeCoverageReportforIntegTest(type: JacocoReport, group: 'verification') {
  description = 'Generates aggregate report from all subprojects for integration test.'

  executionData.setFrom fileTree(dir: '.', include: ['**/build/jacoco/integTest.exec', '**/build/jacoco/javaRestTest.exec'])

  gradle.projectsEvaluated {
    // Select subprojects that are supported by jacoco and have got integration tests
    def selectedSubprojects = subprojects.findAll { it.pluginManager.hasPlugin('java') && it.tasks.findByName('integTest') }
    sourceDirectories.setFrom files(selectedSubprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(selectedSubprojects.sourceSets.main.output)
    dependsOn selectedSubprojects.integTest
  }
}
