/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

import org.opensearch.gradle.info.BuildParams

apply plugin: 'opensearch.publish'

base {
  archivesBaseName = 'opensearch-common'
}

dependencies {
  // This dependency is used only by :libs:core for null-checking interop with other tools
  compileOnly "com.google.code.findbugs:jsr305:3.0.2"

  /*******
   *  !!!! NO THIRD PARTY DEPENDENCIES !!!!
   *******/

  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"

  testImplementation(project(":test:framework")) {
    exclude group: 'org.opensearch', module: 'opensearch-common'
  }
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs -= '-Xlint:unchecked'
}

tasks.named('forbiddenApisMain').configure {
  // :libs:opensearch-common does not depend on server
  // TODO: Need to decide how we want to handle for forbidden signatures with the changes to server
  replaceSignatureFiles 'jdk-signatures'
}

// Add support for incubator modules on supported Java versions.
if (BuildParams.runtimeJavaVersion >= JavaVersion.VERSION_20) {
  sourceSets {
    java20 {
      java {
        srcDirs = ['src/main/java20']
      }
    }

    java20Test {
      java {
        srcDirs = ['src/test/java20']
      }
    }
  }

  configurations {
    java20Implementation.extendsFrom(implementation)
    java20TestImplementation.extendsFrom(implementation)
  }

  dependencies {
    java20Implementation sourceSets.main.output

    // Adding Java 20 sources as compile-only to make them visible during compilation,
    // but using the multi-release JAR output to provide the runtime functionality.
    // This helps avoid JarHell problems when an overridden class is present with the same name.
    java20TestCompileOnly sourceSets.java20.output
    java20TestImplementation files(jar.archiveFile)
    java20TestImplementation sourceSets.test.output
    java20TestImplementation(project(':test:framework')) {
      exclude group: 'org.opensearch', module: 'opensearch-common'
    }
  }

  compileJava20Java {
    sourceCompatibility = JavaVersion.VERSION_20
    targetCompatibility = JavaVersion.VERSION_20
    options.compilerArgs += ['--add-modules', 'jdk.incubator.vector']
    options.compilerArgs -= '-Werror' // use of incubator modules is reported as a warning
  }

  compileJava20TestJava {
    sourceCompatibility = JavaVersion.VERSION_20
    targetCompatibility = JavaVersion.VERSION_20
    options.compilerArgs += ['--add-modules', 'jdk.incubator.vector']
    options.compilerArgs -= '-Werror' // use of incubator modules is reported as a warning
  }

  jar {
    metaInf {
      into 'versions/20'
      from sourceSets.java20.output
    }
    manifest.attributes('Multi-Release': 'true')
  }

  forbiddenApisJava20 {
    failOnMissingClasses = false
    ignoreSignaturesOfMissingClasses = true
  }

  forbiddenApisJava20Test {
    failOnMissingClasses = false
    ignoreSignaturesOfMissingClasses = true
  }

  tasks.register('testJava20', Test) {
    dependsOn jar
    shouldRunAfter test
    group = 'verification'
    testClassesDirs = sourceSets.java20Test.output.classesDirs
    classpath = sourceSets.java20Test.runtimeClasspath
  }

  check.dependsOn('testJava20')
}
