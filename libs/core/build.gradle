/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.opensearch.gradle.info.BuildParams

plugins {
  id('com.google.protobuf') version 'latest.release'
  id('opensearch.publish')
}

base {
  archivesBaseName = 'opensearch-core'
}

// we want to keep the JDKs in our IDEs set to JDK 8 until minimum JDK is bumped to 11 so we do not include this source set in our IDEs
if (!isEclipse) {
  sourceSets {
    java11 {
      java {
        srcDirs = ['src/main/java11']
      }
    }
  }

  configurations {
    java11Compile.extendsFrom(compile)
  }

  dependencies {
    java11Implementation sourceSets.main.output
  }

  compileJava11Java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
  }

  forbiddenApisJava11 {
    if (BuildParams.runtimeJavaVersion < JavaVersion.VERSION_11) {
      targetCompatibility = JavaVersion.VERSION_11
    }
    replaceSignatureFiles 'jdk-signatures'
  }

  jar {
    metaInf {
      into 'versions/11'
      from sourceSets.java11.output
    }
    manifest.attributes('Multi-Release': 'true')
  }
}

dependencies {
  api project(':libs:opensearch-common')

  api "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"

  // lucene
  api "org.apache.lucene:lucene-core:${versions.lucene}"

  // logging
  api "org.apache.logging.log4j:log4j-api:${versions.log4j}"

  // protobuf
  api "com.google.protobuf:protobuf-java:${versions.protobuf}"
  api "jakarta.annotation:jakarta.annotation-api:${versions.jakarta_annotation}"

  testImplementation "com.carrotsearch.randomizedtesting:randomizedtesting-runner:${versions.randomizedrunner}"
  testImplementation "junit:junit:${versions.junit}"
  testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"

  testImplementation(project(":test:framework")) {
    exclude group: 'org.opensearch', module: 'opensearch-core'
  }
}

tasks.named('forbiddenApisMain').configure {
  // :libs:opensearch-core does not depend on server
  // TODO: Need to decide how we want to handle for forbidden signatures with the changes to server
  replaceSignatureFiles 'jdk-signatures'
}

tasks.named("thirdPartyAudit").configure {
  ignoreMissingClasses(
    // from log4j
    *[
        'org.osgi.framework.Bundle',
        'org.osgi.framework.BundleActivator',
        'org.osgi.framework.BundleContext',
        'org.osgi.framework.BundleEvent',
        'org.osgi.framework.SynchronousBundleListener',
        'org.osgi.framework.wiring.BundleWire',
        'org.osgi.framework.wiring.BundleWiring',
    ]  + (BuildParams.runtimeJavaVersion < JavaVersion.VERSION_20) ? [] : [
       'jdk.incubator.vector.ByteVector',
       'jdk.incubator.vector.FloatVector',
       'jdk.incubator.vector.IntVector',
       'jdk.incubator.vector.ShortVector',
       'jdk.incubator.vector.Vector',
       'jdk.incubator.vector.VectorOperators',
       'jdk.incubator.vector.VectorSpecies'
    ]
  )
  ignoreViolations(
    'com.google.protobuf.MessageSchema',
    'com.google.protobuf.UnsafeUtil',
    'com.google.protobuf.UnsafeUtil$1',
    'com.google.protobuf.UnsafeUtil$Android32MemoryAccessor',
    'com.google.protobuf.UnsafeUtil$Android64MemoryAccessor',
    'com.google.protobuf.UnsafeUtil$JvmMemoryAccessor',
    'com.google.protobuf.UnsafeUtil$MemoryAccessor'
  )
}

tasks.named("dependencyLicenses").configure {
  mapping from: /jackson-.*/, to: 'jackson'
  mapping from: /lucene-.*/, to: 'lucene'
}

tasks.named("licenseHeaders").configure {
  dependsOn("generateProto")
  // Ignore for protobuf generated code
  excludes << 'org/opensearch/core/tasks/proto/*'
}

tasks.named("sourcesJar").configure {
  // Ignore duplicates for protobuf generated code (main and generatedSources).
  filesMatching("**/proto/*") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  }
}

tasks.named("missingJavadoc").configure {
  dependsOn("generateProto")
  javadocMissingIgnore = [
    "org.opensearch.core.tasks.proto.TaskIdProto",
    "org.opensearch.core.tasks.proto.TaskIdProto.TaskIdOrBuilder",
    "org.opensearch.core.tasks.proto"
  ]
}
